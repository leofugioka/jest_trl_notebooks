[{"content":"","type":"text","id":"f8ygf"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction ColorList() {\n  return (\n    <div>\n      <ul>\n        <li>Red</li>\n        <li>Blue</li>\n        <li>Green</li>\n      </ul>\n    </div>\n  );\n}\nrender(<ColorList />);","type":"code","id":"xvwc8"},{"content":"test('getBy, queryBy, findBy finding 0 elements', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('textbox')).toThrow();\n  expect(screen.queryByRole('textbox')).toEqual(null);\n\n  let errorThrown = false;\n  try {\n    await screen.findByRole('textbox');\n  } catch (err) {\n    errorThrown = true;\n  }\n  expect(errorThrown).toEqual(true);\n});","type":"code","id":"yfk4d"},{"content":"test('getBy, queryBy and findBy when they find 1 element', async () => {\r\n  render(<ColorList />);\r\n\r\n  expect(\r\n    screen.getByRole('list')\r\n  ).toBeInTheDocument();\r\n  expect(\r\n    screen.queryByRole('list')\r\n  ).toBeInTheDocument();\r\n  expect(\r\n    await screen.findByRole('list')\r\n  ).toBeInTheDocument();\r\n})","type":"code","id":"u4uhv"},{"content":"test('getBy, queryBy and findBy when finding > 1 element', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('listitem')).toThrow();\n  expect(() => screen.queryByRole('listitem')).toThrow();\n  let errThrown = false;\n  try {\n    await screen.findByRole('listitem');\n  } catch (err) {\n    errThrown = true;\n  }\n  expect(errThrown).toEqual(true);\n});","type":"code","id":"jnqvr"},{"content":"test('getAllBy, queryAllBy and findAllBy', async () => {\r\n  render(<ColorList />);\r\n\r\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\r\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\r\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3);\r\n})","type":"code","id":"il5lw"},{"content":"test('favor using getBy to prove an element exists', () => {\r\n  render(<ColorList />);\r\n\r\n  // the getBy already throws an error if it doesn't find the element, which interrupts the remainder of the test\r\n  const element = screen.getByRole('list');\r\n\r\n  // even if getBy throws an error, always define the assertion, it will prevent an test failure in case another engineer changes the getBy for queryBy, what would prevent an error to be thrown, hence making the test succeed in case the assertion is missing, even if the searched element is not found.\r\n  expect(element).toBeInTheDocument();\r\n})","type":"code","id":"lktnm"},{"content":"test('favor queryBy when proving an element does not exist', () => {\r\n  render(<ColorList />);\r\n\r\n  // the reason to choose queryBy instead of getBy is because the later throws an error, automatically failing the test, queryBy, on the other hand, allows the test to proceed and evaluate the assertion\r\n  const element = screen.queryByRole('textbox');\r\n\r\n  expect(element).not.toBeInTheDocument();\r\n})","type":"code","id":"bl5zj"},{"content":"import {useState, useEffect} from 'react';\r\n\r\nfunction fakeFetchColors() {\r\n  return Promise.resolve(\r\n    ['red', 'blue', 'green']\r\n  )\r\n}\r\n\r\nfunction LoadableColorList() {\r\n  const [colors, setColors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fakeFetchColors()\r\n    .then(c => setColors(c))\r\n  }, [])\r\n\r\n  const renderedColors = colors.map((color) => {\r\n    return <li key={color}>{color}</li>\r\n  })\r\n\r\n  return <ul>{renderedColors}</ul>\r\n}\r\n\r\nrender(<LoadableColorList />);","type":"code","id":"y1o78"},{"content":"test('favor findBy or findAllBy in data fetching, or dealing with promises', async () => {\r\n  render(<LoadableColorList />);\r\n\r\n  const els = await screen.findAllByRole('listitem');\r\n\r\n  expect(els).toHaveLength(3);\r\n})","type":"code","id":"rzosg"}]